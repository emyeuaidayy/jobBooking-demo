"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var enc_base64_1 = __importDefault(require("crypto-js/enc-base64"));
var enc_utf8_1 = __importDefault(require("crypto-js/enc-utf8"));
var verifier_1 = __importDefault(require("./verifier"));
var Errors = __importStar(require("./errors"));
var algorithms_1 = __importStar(require("./algorithms"));
var helpers_1 = require("./helpers");
var _key;
var parse = function (encodedString) {
    return JSON.parse(enc_base64_1.default.parse(encodedString).toString(enc_utf8_1.default));
};
var sign = function (body, algorithm) {
    return (0, helpers_1.urlEncodeBase64)(algorithm(body, _key).toString(enc_base64_1.default));
};
var Decoder = /** @class */ (function () {
    function Decoder(key) {
        _key = key;
    }
    Object.defineProperty(Decoder.prototype, "header", {
        set: function (header) {
            try {
                this._header = parse(header);
            }
            catch (error) {
                throw new Errors.InvalidHeader();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Decoder.prototype, "body", {
        set: function (body) {
            try {
                this._body = parse(body);
            }
            catch (error) {
                throw new Errors.InvalidBody();
            }
        },
        enumerable: false,
        configurable: true
    });
    Decoder.prototype.getAlgorithm = function () {
        var algorithm = this._header && this._header.alg;
        if (!algorithm) {
            throw new Errors.AlgorithmMissing();
        }
        if (algorithm === 'none') {
            return 'none';
        }
        if (!~algorithms_1.supportedAlgorithms.indexOf(algorithm)) {
            throw new Errors.AlgorithmNotSupported();
        }
        return algorithms_1.default[algorithm];
    };
    Decoder.prototype.verifySignature = function (encodedHeader, encodedBody) {
        if (this.algorithm === 'none') {
            return true;
        }
        var signatureBody = "".concat(encodedHeader, ".").concat(encodedBody);
        if (this.signature !== sign(signatureBody, this.algorithm)) {
            throw new Errors.SignatureInvalid();
        }
        return true;
    };
    Decoder.prototype.verifyClaims = function () {
        verifier_1.default.verifyAll(this._body, this.options);
    };
    Decoder.prototype.decodeAndVerify = function (token, options) {
        if (options === void 0) { options = {}; }
        var _a = token.toString().split('.'), encodedHeader = _a[0], encodedBody = _a[1], signature = _a[2];
        if (!encodedHeader || !encodedBody) {
            throw new Errors.InvalidStructure();
        }
        this.options = options;
        this.header = encodedHeader;
        this.body = encodedBody;
        this.signature = signature;
        this.algorithm = this.getAlgorithm();
        if (_key !== null) {
            this.verifySignature(encodedHeader, encodedBody);
        }
        this.verifyClaims();
        return this._body;
    };
    return Decoder;
}());
exports.default = Decoder;
