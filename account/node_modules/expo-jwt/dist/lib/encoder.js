"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var enc_base64_1 = __importDefault(require("crypto-js/enc-base64"));
var enc_utf8_1 = __importDefault(require("crypto-js/enc-utf8"));
var errors_1 = require("./errors");
var algorithms_1 = __importDefault(require("./algorithms"));
var helpers_1 = require("./helpers");
var algorithms_2 = require("../types/algorithms");
var defaultOptions = {
    algorithm: algorithms_2.SupportedAlgorithms.HS256,
};
var _key;
var Encoder = /** @class */ (function () {
    function Encoder(body, key, options) {
        if (options === void 0) { options = {}; }
        this.body = body;
        this.options = __assign(__assign({}, defaultOptions), options);
        _key = key;
    }
    Encoder.prototype.buildHeader = function () {
        return {
            alg: this.options.algorithm,
            typ: 'JWT',
        };
    };
    Encoder.prototype.encodeAndSign = function () {
        var jsonHeader = JSON.stringify(this.buildHeader());
        var jsonBody = JSON.stringify(this.body);
        var base64Header = enc_base64_1.default.stringify(enc_utf8_1.default.parse(jsonHeader));
        var base64Body = enc_base64_1.default.stringify(enc_utf8_1.default.parse(jsonBody));
        var encodedHeader = (0, helpers_1.urlEncodeBase64)(base64Header);
        var encodedBody = (0, helpers_1.urlEncodeBase64)(base64Body);
        if (!this.options.algorithm || this.options.algorithm === 'none') {
            return "".concat(encodedHeader, ".").concat(encodedBody, ".");
        }
        var algorithm = algorithms_1.default[this.options.algorithm];
        if (!algorithm) {
            throw new errors_1.AlgorithmNotSupported();
        }
        var signature = algorithm("".concat(encodedHeader, ".").concat(encodedBody), _key);
        var encodedSignature = signature.toString(enc_base64_1.default);
        var urlSafeEncodedSignature = (0, helpers_1.urlEncodeBase64)(encodedSignature);
        return "".concat(encodedHeader, ".").concat(encodedBody, ".").concat(urlSafeEncodedSignature);
    };
    return Encoder;
}());
exports.default = Encoder;
